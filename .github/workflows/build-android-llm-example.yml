name: LLM Example app Android build check
on:
  pull_request:
    paths:
      - .github/workflows/build-android-llm-example.yml
      - apps/llm/**
      - packages/react-native-executorch/**
  push:
    branches:
      - main
    paths:
      - .github/workflows/build-android-llm-example.yml
      - apps/llm/**
      - packages/react-native-executorch/**
  workflow_dispatch:
jobs:
  build:
    if: github.repository == 'software-mansion/react-native-executorch'
    runs-on: ubuntu-latest
    env:
      WORKING_DIRECTORY: apps/llm
    concurrency:
      group: android-${{ github.ref }}
      cancel-in-progress: true
    steps:
      - name: Check out Git repository
        uses: actions/checkout@v4
        with:
          submodules: recursive
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'yarn'
      - name: Setup Java 17
        uses: actions/setup-java@v4
        with:
          distribution: 'zulu'
          java-version: 17
          cache: 'gradle'
      - name: Install root dependencies
        run: yarn install --immutable
      - name: Install Expo CLI
        run: |
          npm install -g @expo/cli
          echo "$(npm prefix -g)/bin" >> $GITHUB_PATH
      - name: Cache Expo prebuild
        uses: actions/cache@v4
        with:
          path: ${{ env.WORKING_DIRECTORY }}/android
          key: ${{ runner.os }}-expo-android-${{ hashFiles('${{ env.WORKING_DIRECTORY }}/app.json', '${{ env.WORKING_DIRECTORY }}/package.json') }}
          restore-keys: |
            ${{ runner.os }}-expo-android-
      - name: Generate native Android project
        working-directory: ${{ env.WORKING_DIRECTORY }}
        run: |
          if [ ! -d "android" ]; then
            npx expo prebuild --platform android --no-install
          else
            echo "Android project exists, skipping prebuild"
          fi
      - name: Cache Gradle
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
            ${{ env.WORKING_DIRECTORY }}/android/.gradle
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-
      - name: Build app
        working-directory: ${{ env.WORKING_DIRECTORY }}/android
        run: |
          ./gradlew assembleDebug \
            --build-cache \
            --parallel \
            --daemon \
            --configure-on-demand \
            -PreactNativeArchitectures=arm64-v8a \
            -Dorg.gradle.jvmargs="-Xmx4g -XX:+HeapDumpOnOutOfMemoryError" \
            -Dorg.gradle.workers.max=4
