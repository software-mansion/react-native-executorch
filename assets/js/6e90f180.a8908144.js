"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[264],{5680:(e,n,t)=>{t.d(n,{xA:()=>g,yg:()=>c});var a=t(6540);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var s=a.createContext({}),d=function(e){var n=a.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},g=function(e){var n=d(e.components);return a.createElement(s.Provider,{value:n},e.children)},p="mdxType",m={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},u=a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,o=e.originalType,s=e.parentName,g=l(e,["components","mdxType","originalType","parentName"]),p=d(t),u=r,c=p["".concat(s,".").concat(u)]||p[u]||m[u]||o;return t?a.createElement(c,i(i({ref:n},g),{},{components:t})):a.createElement(c,i({ref:n},g))}));function c(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var o=t.length,i=new Array(o);i[0]=u;var l={};for(var s in n)hasOwnProperty.call(n,s)&&(l[s]=n[s]);l.originalType=e,l[p]="string"==typeof e?e:r,i[1]=l;for(var d=2;d<o;d++)i[d]=t[d];return a.createElement.apply(null,i)}return a.createElement.apply(null,t)}u.displayName="MDXCreateElement"},7898:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>i,default:()=>m,frontMatter:()=>o,metadata:()=>l,toc:()=>d});var a=t(8168),r=(t(6540),t(5680));const o={title:"Running LLMs",sidebar_position:1},i=void 0,l={unversionedId:"guides/running-llms",id:"guides/running-llms",title:"Running LLMs",description:"React Native ExecuTorch supports LLaMa 3.2 models, including quantized versions. Before getting started, you\u2019ll need to obtain the .pte binary\u2014a serialized model\u2014and the tokenizer. There are various ways to accomplish this:",source:"@site/docs/guides/running-llms.md",sourceDirName:"guides",slug:"/guides/running-llms",permalink:"/react-native-executorch/docs/guides/running-llms",draft:!1,editUrl:"https://github.com/software-mansion/react-native-executorch/edit/main/docs/docs/guides/running-llms.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{title:"Running LLMs",sidebar_position:1},sidebar:"tutorialSidebar",previous:{title:"Guides",permalink:"/react-native-executorch/docs/category/guides"},next:{title:"Exporting LLaMa",permalink:"/react-native-executorch/docs/guides/exporting-llama"}},s={},d=[{value:"Initializing",id:"initializing",level:2},{value:"Arguments",id:"arguments",level:3},{value:"Returns",id:"returns",level:3},{value:"Loading models",id:"loading-models",level:3},{value:"Sending a message",id:"sending-a-message",level:3},{value:"Listening for the response",id:"listening-for-the-response",level:3}],g={toc:d},p="wrapper";function m(e){let{components:n,...t}=e;return(0,r.yg)(p,(0,a.A)({},g,t,{components:n,mdxType:"MDXLayout"}),(0,r.yg)("p",null,"React Native ExecuTorch supports LLaMa 3.2 models, including quantized versions. Before getting started, you\u2019ll need to obtain the .pte binary\u2014a serialized model\u2014and the tokenizer. There are various ways to accomplish this:"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},"For your convienience, it's best if you use models exported by us, you can get them from our hugging face repository. You can also use ",(0,r.yg)("a",{parentName:"li",href:"https://github.com/software-mansion/react-native-executorch/tree/main/src/modelUrls.ts"},"constants")," shipped with our library."),(0,r.yg)("li",{parentName:"ul"},"If you want to export model by yourself,you can use a Docker image that we've prepared. To see how it works, check out ",(0,r.yg)("a",{parentName:"li",href:"/react-native-executorch/docs/guides/exporting-llama"},"exporting LLaMa")),(0,r.yg)("li",{parentName:"ul"},"Follow the official ",(0,r.yg)("a",{parentName:"li",href:"https://github.com/pytorch/executorch/blob/cbfdf78f8/examples/demo-apps/android/LlamaDemo/docs/delegates/xnnpack_README.md"},"tutorial")," made by ExecuTorch team to build the model and tokenizer yourself")),(0,r.yg)("h2",{id:"initializing"},"Initializing"),(0,r.yg)("p",null,"In order to load a model into the app, you need to run the following code:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-typescript"},"import { useLLM, LLAMA3_2_1B_URL } from 'react-native-executorch';\n\nconst llama = useLLM({\n  modelSource: LLAMA3_2_1B_URL,\n  tokenizer: require('../assets/tokenizer.bin'),\n  contextWindowLength: 3,\n});\n")),(0,r.yg)("p",null,"The code snippet above fetches the model from the specified URL, loads it into memory, and returns an object with various methods and properties for controlling the model. You can monitor the loading progress by checking the ",(0,r.yg)("inlineCode",{parentName:"p"},"llama.downloadProgress")," and ",(0,r.yg)("inlineCode",{parentName:"p"},"llama.isModelReady")," property, and if anything goes wrong, the ",(0,r.yg)("inlineCode",{parentName:"p"},"llama.error")," property will contain the error message."),(0,r.yg)("admonition",{type:"danger"},(0,r.yg)("mdxAdmonitionTitle",{parentName:"admonition"},"[Danger]"),(0,r.yg)("p",{parentName:"admonition"},"Lower-end devices might not be able to fit LLMs into memory. We recommend using quantized models to reduce the memory footprint.")),(0,r.yg)("admonition",{type:"caution"},(0,r.yg)("mdxAdmonitionTitle",{parentName:"admonition"},"[Caution]"),(0,r.yg)("p",{parentName:"admonition"},"Given computational constraints, our architecture is designed to support only one instance of the model runner at the time. Consequently, this means you can have only one active component leveraging ",(0,r.yg)("inlineCode",{parentName:"p"},"useLLM")," concurrently.")),(0,r.yg)("h3",{id:"arguments"},"Arguments"),(0,r.yg)("p",null,(0,r.yg)("strong",{parentName:"p"},(0,r.yg)("inlineCode",{parentName:"strong"},"modelSource"))," - A string that specifies the location of the model binary. For more information, take a look at ",(0,r.yg)("a",{parentName:"p",href:"#loading-models"},"loading models")," section."),(0,r.yg)("p",null,(0,r.yg)("strong",{parentName:"p"},(0,r.yg)("inlineCode",{parentName:"strong"},"tokenizer"))," - URL to the binary file which contains the tokenizer"),(0,r.yg)("p",null,(0,r.yg)("strong",{parentName:"p"},(0,r.yg)("inlineCode",{parentName:"strong"},"contextWindowLength"))," - The number of messages from the current conversation that the model will use to generate a response. The higher the number, the more context the model will have. Keep in mind that using larger context windows will result in longer inference time and higher memory usage."),(0,r.yg)("p",null,(0,r.yg)("strong",{parentName:"p"},(0,r.yg)("inlineCode",{parentName:"strong"},"systemPrompt")),' - Often used to tell the model what is its purpose, for example - "Be a helpful translator"'),(0,r.yg)("h3",{id:"returns"},"Returns"),(0,r.yg)("table",null,(0,r.yg)("thead",{parentName:"table"},(0,r.yg)("tr",{parentName:"thead"},(0,r.yg)("th",{parentName:"tr",align:null},"Field"),(0,r.yg)("th",{parentName:"tr",align:null},"Type"),(0,r.yg)("th",{parentName:"tr",align:null},"Description"))),(0,r.yg)("tbody",{parentName:"table"},(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("inlineCode",{parentName:"td"},"generate")),(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("inlineCode",{parentName:"td"},"(input: string) => Promise<void>")),(0,r.yg)("td",{parentName:"tr",align:null},"Function to start generating a response with the given input string.")),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("inlineCode",{parentName:"td"},"response")),(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("inlineCode",{parentName:"td"},"string")),(0,r.yg)("td",{parentName:"tr",align:null},"State of the generated response. This field is updated with each token generated by the model")),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("inlineCode",{parentName:"td"},"error")),(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("code",null,"string ","|"," null")),(0,r.yg)("td",{parentName:"tr",align:null},"Contains the error message if the model failed to load")),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("inlineCode",{parentName:"td"},"isModelGenerating")),(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("inlineCode",{parentName:"td"},"boolean")),(0,r.yg)("td",{parentName:"tr",align:null},"Indicates whether the model is currently generating a response")),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("inlineCode",{parentName:"td"},"interrupt")),(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("inlineCode",{parentName:"td"},"() => void")),(0,r.yg)("td",{parentName:"tr",align:null},"Function to interrupt the current inference")),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("inlineCode",{parentName:"td"},"isModelReady")),(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("inlineCode",{parentName:"td"},"boolean")),(0,r.yg)("td",{parentName:"tr",align:null},"Indicates whether the model is ready")),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("inlineCode",{parentName:"td"},"downloadProgress")),(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("inlineCode",{parentName:"td"},"number")),(0,r.yg)("td",{parentName:"tr",align:null},"Represents the download progress as a value between 0 and 1, indicating the extent of the model file retrieval.")))),(0,r.yg)("h3",{id:"loading-models"},"Loading models"),(0,r.yg)("p",null,"There are three different methods available for loading the model and tokenizer files, depending on their size and location."),(0,r.yg)("p",null,(0,r.yg)("strong",{parentName:"p"},"1. Load from React-Native assets folder (For Files < "),"512MB",(0,r.yg)("strong",{parentName:"p"},")")),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-typescript"},"modelSource: require('../assets/llama3_2.pte');\n")),(0,r.yg)("p",null,(0,r.yg)("strong",{parentName:"p"},"2. Load from Remote URL:")),(0,r.yg)("p",null,"For files larger than 512MB or when you want to keep size of the app smaller, you can load the model from a remote URL (e.g. HuggingFace)."),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-typescript"},"modelSource: 'https://.../llama3_2.pte';\n")),(0,r.yg)("p",null,(0,r.yg)("strong",{parentName:"p"},"3. Load from local file system:")),(0,r.yg)("p",null,"If you prefer to delegate the process of obtaining and loading model and tokenizer files to the user, you can use the following method:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-typescript"},"modelSource: 'file:://var/mobile/.../llama3_2.pte',\n")),(0,r.yg)("admonition",{type:"info"},(0,r.yg)("mdxAdmonitionTitle",{parentName:"admonition"},"[Info]"),(0,r.yg)("p",{parentName:"admonition"},"The downloaded files are stored in documents directory of your application.")),(0,r.yg)("h3",{id:"sending-a-message"},"Sending a message"),(0,r.yg)("p",null,"In order to send a message to the model, one can use the following code:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-typescript"},"const llama = useLoadModels(\n    modelSource: LLAMA3_2_1B_URL,\n    tokenizer: require('../assets/tokenizer.bin'),\n);\n\n...\nconst message = 'Hi, who are you?';\nawait llama.generate(message);\n...\n")),(0,r.yg)("h3",{id:"listening-for-the-response"},"Listening for the response"),(0,r.yg)("p",null,"As you might've noticed, there is no return value from the ",(0,r.yg)("inlineCode",{parentName:"p"},"runInference")," function. Instead, the ",(0,r.yg)("inlineCode",{parentName:"p"},".response")," field of the model is updated with each token.\nThis is how you can render the response of the model:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-typescript"},"...\nreturn (\n    <Text>{llama.response}</Text>\n)\n")),(0,r.yg)("p",null,"Behind the scenes, tokens are generated one by one, and the response property is updated with each token as it\u2019s created. This means that the text component will re-render whenever llama.response gets updated."),(0,r.yg)("p",null,"Sometimes, you might want to stop the model while it\u2019s generating. To do this, you can use ",(0,r.yg)("inlineCode",{parentName:"p"},"interrupt()"),", which will halt the model and append the current response to its internal conversation state."),(0,r.yg)("p",null,"There are also cases when you need to check if tokens are being generated, such as to conditionally render a stop button. We\u2019ve made this easy with the ",(0,r.yg)("inlineCode",{parentName:"p"},"isTokenBeingGenerated")," property."))}m.isMDXComponent=!0}}]);