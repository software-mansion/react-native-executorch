"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[94],{3429:(e,s,r)=>{r.r(s),r.d(s,{assets:()=>o,contentTitle:()=>l,default:()=>h,frontMatter:()=>i,metadata:()=>n,toc:()=>d});const n=JSON.parse('{"id":"utilities/resource-fetcher","title":"Resource Fetcher","description":"This module provides functions to download and work with downloaded files stored in the application\'s document directory inside the react-native-executorch/ directory. These utilities can help you manage your storage and clean up the downloaded files when they are no longer needed.","source":"@site/versioned_docs/version-0.5.x/05-utilities/resource-fetcher.md","sourceDirName":"05-utilities","slug":"/utilities/resource-fetcher","permalink":"/react-native-executorch/docs/utilities/resource-fetcher","draft":false,"unlisted":false,"editUrl":"https://github.com/software-mansion/react-native-executorch/edit/main/docs/versioned_docs/version-0.5.x/05-utilities/resource-fetcher.md","tags":[],"version":"0.5.x","frontMatter":{"title":"Resource Fetcher"},"sidebar":"tutorialSidebar","previous":{"title":"Utilities","permalink":"/react-native-executorch/docs/category/utilities"}}');var t=r(4848),c=r(8453);const i={title:"Resource Fetcher"},l=void 0,o={},d=[{value:"fetch",id:"fetch",level:2},{value:"Reference",id:"reference",level:3},{value:"Parameters",id:"parameters",level:3},{value:"Returns",id:"returns",level:3},{value:"pauseFetching",id:"pausefetching",level:2},{value:"Reference",id:"reference-1",level:3},{value:"Parameters",id:"parameters-1",level:3},{value:"Returns",id:"returns-1",level:3},{value:"resumeFetching",id:"resumefetching",level:2},{value:"Reference",id:"reference-2",level:3},{value:"Parameters",id:"parameters-2",level:3},{value:"Returns",id:"returns-2",level:3},{value:"cancelFetching",id:"cancelfetching",level:2},{value:"Reference",id:"reference-3",level:3},{value:"Parameters",id:"parameters-3",level:3},{value:"Returns",id:"returns-3",level:3},{value:"deleteResources",id:"deleteresources",level:2},{value:"Reference",id:"reference-4",level:3},{value:"Parameters",id:"parameters-4",level:3},{value:"Returns",id:"returns-4",level:3},{value:"getFilesTotalSize",id:"getfilestotalsize",level:2},{value:"Reference",id:"reference-5",level:3},{value:"Parameters",id:"parameters-5",level:3},{value:"Returns",id:"returns-5",level:3},{value:"listDownloadedFiles",id:"listdownloadedfiles",level:2},{value:"Reference",id:"reference-6",level:3},{value:"Returns",id:"returns-6",level:3},{value:"listDownloadedModels",id:"listdownloadedmodels",level:2},{value:"Reference",id:"reference-7",level:3},{value:"Returns",id:"returns-7",level:3}];function a(e){const s={admonition:"admonition",code:"code",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",ul:"ul",...(0,c.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsxs)(s.p,{children:["This module provides functions to download and work with downloaded files stored in the application's document directory inside the ",(0,t.jsx)(s.code,{children:"react-native-executorch/"})," directory. These utilities can help you manage your storage and clean up the downloaded files when they are no longer needed."]}),"\n",(0,t.jsx)(s.h2,{id:"fetch",children:"fetch"}),"\n",(0,t.jsx)(s.p,{children:"Fetches resources (remote URLs, local files or embedded assets), downloads or stores them locally for use by React Native ExecuTorch."}),"\n",(0,t.jsx)(s.h3,{id:"reference",children:"Reference"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-typescript",children:"import { ResourceFetcher } from 'react-native-executorch';\n\nconst uris = await ResourceFetcher.fetch(\n  (progress) => console.log('Total progress:', progress),\n  'https://.../llama3_2.pte',\n  'https://.../qwen3.pte'\n);\n"})}),"\n",(0,t.jsx)(s.h3,{id:"parameters",children:"Parameters"}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.code,{children:"callback: (downloadProgress: number) => void"})," - Optional callback to track progress of all downloads, reported between 0 and 1."]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.code,{children:"...sources: ResourceSource[]"})," - Multiple resources that can be strings, asset references, or objects."]}),"\n"]}),"\n",(0,t.jsx)(s.h3,{id:"returns",children:"Returns"}),"\n",(0,t.jsxs)(s.p,{children:[(0,t.jsx)(s.code,{children:"Promise<string[] | null>"}),":"]}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsx)(s.li,{children:"If the fetch was successful, it returns a promise which resolves to an array of local file paths for the downloaded/stored resources (without file:// prefix)."}),"\n",(0,t.jsxs)(s.li,{children:["If the fetch was interrupted by ",(0,t.jsx)(s.code,{children:"pauseFetching"})," or ",(0,t.jsx)(s.code,{children:"cancelFetching"}),", it returns a promise which resolves to ",(0,t.jsx)(s.code,{children:"null"}),"."]}),"\n"]}),"\n",(0,t.jsx)(s.admonition,{type:"info",children:(0,t.jsx)(s.p,{children:"If the resource is an object, it will be saved as a JSON file on disk."})}),"\n",(0,t.jsx)(s.h2,{id:"pausefetching",children:"pauseFetching"}),"\n",(0,t.jsx)(s.p,{children:"Pauses an ongoing download of files."}),"\n",(0,t.jsx)(s.h3,{id:"reference-1",children:"Reference"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-typescript",children:"import { ResourceFetcher } from 'react-native-executorch';\n\nconst uris = ResourceFetcher.fetch(\n  (progress) => console.log('Total progress:', progress),\n  'https://.../llama3_2.pte',\n  'https://.../qwen3.pte'\n).then((uris) => {\n  console.log('URI resolved to: ', uris); // since we pause the fetch, uris is resolved to null\n});\n\nawait ResourceFetcher.pauseFetching(\n  'https://.../llama3_2.pte',\n  'https://.../qwen3.pte'\n);\n"})}),"\n",(0,t.jsx)(s.h3,{id:"parameters-1",children:"Parameters"}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.code,{children:"...sources: ResourceSource[]"})," - The resource identifiers used when calling ",(0,t.jsx)(s.code,{children:"fetch"}),"."]}),"\n"]}),"\n",(0,t.jsx)(s.h3,{id:"returns-1",children:"Returns"}),"\n",(0,t.jsxs)(s.p,{children:[(0,t.jsx)(s.code,{children:"Promise<void>"})," \u2013 A promise that resolves once the download is paused."]}),"\n",(0,t.jsx)(s.h2,{id:"resumefetching",children:"resumeFetching"}),"\n",(0,t.jsx)(s.p,{children:"Resumes a paused download of files."}),"\n",(0,t.jsx)(s.h3,{id:"reference-2",children:"Reference"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-typescript",children:"import { ResourceFetcher } from 'react-native-executorch';\n\nconst uris = ResourceFetcher.fetch(\n  (progress) => console.log('Total progress:', progress),\n  'https://.../llama3_2.pte',\n  'https://.../qwen3.pte'\n).then((uris) => {\n  console.log('URI resolved as: ', uris); // since we pause the fetch, uris is resolved to null\n});\n\nawait ResourceFetcher.pauseFetching(\n  'https://.../llama3_2.pte',\n  'https://.../qwen3.pte'\n);\n\nconst resolvedUris = await ResourceFetcher.resumeFetching(\n  'https://.../llama3_2.pte',\n  'https://.../qwen3.pte'\n);\n//resolvedUris is resolved to file paths to fetched resources, unless explicitly paused/cancel again.\n"})}),"\n",(0,t.jsx)(s.h3,{id:"parameters-2",children:"Parameters"}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.code,{children:"...sources: ResourceSource[]"})," - The resource identifiers used when calling ",(0,t.jsx)(s.code,{children:"fetch"}),"."]}),"\n"]}),"\n",(0,t.jsx)(s.h3,{id:"returns-2",children:"Returns"}),"\n",(0,t.jsxs)(s.p,{children:[(0,t.jsx)(s.code,{children:"Promise<string[] | null>"}),":"]}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsx)(s.li,{children:"If the fetch was successful, it returns a promise which resolves to an array of local file paths for the downloaded resources (without file:// prefix)."}),"\n",(0,t.jsxs)(s.li,{children:["If the fetch was again interrupted by ",(0,t.jsx)(s.code,{children:"pauseFetching"})," or ",(0,t.jsx)(s.code,{children:"cancelFetching"}),", it returns a promise which resolves to null."]}),"\n"]}),"\n",(0,t.jsx)(s.admonition,{type:"info",children:(0,t.jsxs)(s.p,{children:["The other way to resume paused resources is to simply call ",(0,t.jsx)(s.code,{children:"fetch"})," again. However, ",(0,t.jsx)(s.code,{children:"resumeFetching"})," is faster."]})}),"\n",(0,t.jsx)(s.h2,{id:"cancelfetching",children:"cancelFetching"}),"\n",(0,t.jsx)(s.p,{children:"Cancels an ongoing/paused download of files."}),"\n",(0,t.jsx)(s.h3,{id:"reference-3",children:"Reference"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-typescript",children:"import { ResourceFetcher } from 'react-native-executorch';\n\nconst uris = ResourceFetcher.fetch(\n  (progress) => console.log('Total progress:', progress),\n  'https://.../llama3_2.pte',\n  'https://.../qwen3.pte'\n).then((uris) => {\n  console.log('URI resolved as: ', uris); // since we cancel the fetch, uris is resolved to null\n});\n\nawait ResourceFetcher.cancelFetching(\n  'https://.../llama3_2.pte',\n  'https://.../qwen3.pte'\n);\n"})}),"\n",(0,t.jsx)(s.h3,{id:"parameters-3",children:"Parameters"}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.code,{children:"...sources: ResourceSource[]"})," - The resource identifiers used when calling ",(0,t.jsx)(s.code,{children:"fetch()"}),"."]}),"\n"]}),"\n",(0,t.jsx)(s.h3,{id:"returns-3",children:"Returns"}),"\n",(0,t.jsxs)(s.p,{children:[(0,t.jsx)(s.code,{children:"Promise<void>"})," \u2013 A promise that resolves once the download is cancelled."]}),"\n",(0,t.jsx)(s.h2,{id:"deleteresources",children:"deleteResources"}),"\n",(0,t.jsx)(s.p,{children:"Deletes downloaded resources from the local filesystem."}),"\n",(0,t.jsx)(s.h3,{id:"reference-4",children:"Reference"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-typescript",children:"import { ResourceFetcher } from 'react-native-executorch';\n\nawait ResourceFetcher.deleteResources('https://.../llama3_2.pte');\n"})}),"\n",(0,t.jsx)(s.h3,{id:"parameters-4",children:"Parameters"}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.code,{children:"...sources: ResourceSource[]"})," - The resource identifiers used when calling ",(0,t.jsx)(s.code,{children:"fetch"}),"."]}),"\n"]}),"\n",(0,t.jsx)(s.h3,{id:"returns-4",children:"Returns"}),"\n",(0,t.jsxs)(s.p,{children:[(0,t.jsx)(s.code,{children:"Promise<void>"})," \u2013 A promise that resolves once all specified resources have been removed."]}),"\n",(0,t.jsx)(s.h2,{id:"getfilestotalsize",children:"getFilesTotalSize"}),"\n",(0,t.jsx)(s.p,{children:"Fetches the info about files size. Works only for remote files."}),"\n",(0,t.jsx)(s.h3,{id:"reference-5",children:"Reference"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-typescript",children:"import { ResourceFetcher } from 'react-native-executorch';\n\nconst totalSize = await ResourceFetcher.getFilesTotalSize(\n  'https://.../llama3_2.pte',\n  'https://.../qwen3.pte'\n);\n"})}),"\n",(0,t.jsx)(s.h3,{id:"parameters-5",children:"Parameters"}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.code,{children:"...sources: ResourceSource[]"})," - The resource identifiers (URLs)."]}),"\n"]}),"\n",(0,t.jsx)(s.h3,{id:"returns-5",children:"Returns"}),"\n",(0,t.jsxs)(s.p,{children:[(0,t.jsx)(s.code,{children:"Promise<number>"})," \u2013 A promise that resolves to combined size of files in bytes."]}),"\n",(0,t.jsx)(s.h2,{id:"listdownloadedfiles",children:"listDownloadedFiles"}),"\n",(0,t.jsx)(s.p,{children:"Lists all the downloaded files used by React Native ExecuTorch."}),"\n",(0,t.jsx)(s.h3,{id:"reference-6",children:"Reference"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-typescript",children:"import { ResourceFetcher } from 'react-native-executorch';\n\nconst filesUris = await ResourceFetcher.listDownloadedFiles();\n"})}),"\n",(0,t.jsx)(s.h3,{id:"returns-6",children:"Returns"}),"\n",(0,t.jsxs)(s.p,{children:[(0,t.jsx)(s.code,{children:"Promise<string[]>"})," - A promise, which resolves to an array of URIs for all the downloaded files."]}),"\n",(0,t.jsx)(s.h2,{id:"listdownloadedmodels",children:"listDownloadedModels"}),"\n",(0,t.jsx)(s.p,{children:"Lists all the downloaded models used by React Native ExecuTorch."}),"\n",(0,t.jsx)(s.h3,{id:"reference-7",children:"Reference"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-typescript",children:"import { ResourceFetcher } from 'react-native-executorch';\n\nconst modelsUris = await ResourceFetcher.listDownloadedModels();\n"})}),"\n",(0,t.jsx)(s.h3,{id:"returns-7",children:"Returns"}),"\n",(0,t.jsxs)(s.p,{children:[(0,t.jsx)(s.code,{children:"Promise<string[]>"})," - A promise, which resolves to an array of URIs for all the downloaded models."]})]})}function h(e={}){const{wrapper:s}={...(0,c.R)(),...e.components};return s?(0,t.jsx)(s,{...e,children:(0,t.jsx)(a,{...e})}):a(e)}},8453:(e,s,r)=>{r.d(s,{R:()=>i,x:()=>l});var n=r(6540);const t={},c=n.createContext(t);function i(e){const s=n.useContext(c);return n.useMemo((function(){return"function"==typeof e?e(s):{...s,...e}}),[s,e])}function l(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:i(e.components),n.createElement(c.Provider,{value:s},e.children)}}}]);