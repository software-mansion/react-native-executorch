"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[489],{5680:(e,t,n)=>{n.d(t,{xA:()=>p,yg:()=>g});var r=n(6540);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var s=r.createContext({}),c=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},p=function(e){var t=c(e.components);return r.createElement(s.Provider,{value:t},e.children)},d="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},u=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,s=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),d=c(n),u=o,g=d["".concat(s,".").concat(u)]||d[u]||m[u]||a;return n?r.createElement(g,l(l({ref:t},p),{},{components:n})):r.createElement(g,l({ref:t},p))}));function g(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,l=new Array(a);l[0]=u;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i[d]="string"==typeof e?e:o,l[1]=i;for(var c=2;c<a;c++)l[c]=n[c];return r.createElement.apply(null,l)}return r.createElement.apply(null,n)}u.displayName="MDXCreateElement"},406:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>l,default:()=>m,frontMatter:()=>a,metadata:()=>i,toc:()=>c});var r=n(8168),o=(n(6540),n(5680));const a={title:"Loading models",sidebar_position:1},l=void 0,i={unversionedId:"fundamentals/loading-models",id:"fundamentals/loading-models",title:"Loading models",description:"There are three different methods available for loading model files, depending on their size and location.",source:"@site/docs/fundamentals/loading-models.md",sourceDirName:"fundamentals",slug:"/fundamentals/loading-models",permalink:"/react-native-executorch/docs/fundamentals/loading-models",draft:!1,editUrl:"https://github.com/software-mansion/react-native-executorch/edit/main/docs/docs/fundamentals/loading-models.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{title:"Loading models",sidebar_position:1},sidebar:"tutorialSidebar",previous:{title:"Getting Started",permalink:"/react-native-executorch/docs/fundamentals/getting-started"},next:{title:"LLMs",permalink:"/react-native-executorch/docs/category/llms"}},s={},c=[{value:"Example",id:"example",level:2}],p={toc:c},d="wrapper";function m(e){let{components:t,...n}=e;return(0,o.yg)(d,(0,r.A)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,o.yg)("p",null,"There are three different methods available for loading model files, depending on their size and location."),(0,o.yg)("p",null,(0,o.yg)("strong",{parentName:"p"},"1. Load from React Native assets folder (For Files < 512MB)")),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-typescript"},"modelSource: require('../assets/llama3_2.pte');\n")),(0,o.yg)("p",null,(0,o.yg)("strong",{parentName:"p"},"2. Load from remote URL:")),(0,o.yg)("p",null,"For files larger than 512MB or when you want to keep size of the app smaller, you can load the model from a remote URL (e.g. HuggingFace)."),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-typescript"},"modelSource: 'https://.../llama3_2.pte';\n")),(0,o.yg)("p",null,(0,o.yg)("strong",{parentName:"p"},"3. Load from local file system:")),(0,o.yg)("p",null,"If you prefer to delegate the process of obtaining and loading model and tokenizer files to the user, you can use the following method:"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-typescript"},"modelSource: 'file::///var/mobile/.../llama3_2.pte',\n")),(0,o.yg)("admonition",{type:"info"},(0,o.yg)("p",{parentName:"admonition"},"The downloaded files are stored in documents directory of your application.")),(0,o.yg)("h2",{id:"example"},"Example"),(0,o.yg)("p",null,"The following code snippet demonstrates how to load model and tokenizer files using ",(0,o.yg)("inlineCode",{parentName:"p"},"useLLM")," hook:"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-typescript"},"import { useLLM } from 'react-native-executorch';\n\nconst llama = useLLM({\n  modelSource: 'https://.../llama3_2.pte',\n  tokenizerSource: require('../assets/tokenizer.bin'),\n});\n")))}m.isMDXComponent=!0}}]);