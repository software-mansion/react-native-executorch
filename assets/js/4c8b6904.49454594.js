"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[557],{5680:(e,t,n)=>{n.d(t,{xA:()=>d,yg:()=>g});var a=n(6540);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,o=function(e,t){if(null==e)return{};var n,a,o={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var s=a.createContext({}),c=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},d=function(e){var t=c(e.components);return a.createElement(s.Provider,{value:t},e.children)},p="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,o=e.mdxType,r=e.originalType,s=e.parentName,d=l(e,["components","mdxType","originalType","parentName"]),p=c(n),m=o,g=p["".concat(s,".").concat(m)]||p[m]||u[m]||r;return n?a.createElement(g,i(i({ref:t},d),{},{components:n})):a.createElement(g,i({ref:t},d))}));function g(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var r=n.length,i=new Array(r);i[0]=m;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[p]="string"==typeof e?e:o,i[1]=l;for(var c=2;c<r;c++)i[c]=n[c];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},2817:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>u,frontMatter:()=>r,metadata:()=>l,toc:()=>c});var a=n(8168),o=(n(6540),n(5680));const r={title:"ClassificationModule",sidebar_position:1},i=void 0,l={unversionedId:"hookless-api/ClassificationModule",id:"hookless-api/ClassificationModule",title:"ClassificationModule",description:"Hookless implementation of the useClassification hook.",source:"@site/docs/hookless-api/ClassificationModule.md",sourceDirName:"hookless-api",slug:"/hookless-api/ClassificationModule",permalink:"/react-native-executorch/docs/hookless-api/ClassificationModule",draft:!1,editUrl:"https://github.com/software-mansion/react-native-executorch/edit/main/docs/docs/hookless-api/ClassificationModule.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{title:"ClassificationModule",sidebar_position:1},sidebar:"tutorialSidebar",previous:{title:"Hookless API",permalink:"/react-native-executorch/docs/category/hookless-api"},next:{title:"ExecuTorchModule",permalink:"/react-native-executorch/docs/hookless-api/ExecutorchModule"}},s={},c=[{value:"Reference",id:"reference",level:2},{value:"Methods",id:"methods",level:3},{value:"Loading the model",id:"loading-the-model",level:2},{value:"Running the model",id:"running-the-model",level:2}],d={toc:c},p="wrapper";function u(e){let{components:t,...n}=e;return(0,o.yg)(p,(0,a.A)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,o.yg)("p",null,"Hookless implementation of the ",(0,o.yg)("a",{parentName:"p",href:"/react-native-executorch/docs/computer-vision/useClassification"},"useClassification")," hook."),(0,o.yg)("h2",{id:"reference"},"Reference"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-typescript"},"import {\n  ClassificationModule,\n  EFFICIENTNET_V2_S,\n} from 'react-native-executorch';\n\nconst imageUri = 'path/to/image.png';\n\n// Loading the model\nawait ClassificationModule.load(EFFICIENTNET_V2_S);\n\n// Running the model\nconst classesWithProbabilities = await ClassificationModule.forward(imageUri);\n")),(0,o.yg)("h3",{id:"methods"},"Methods"),(0,o.yg)("table",null,(0,o.yg)("thead",{parentName:"table"},(0,o.yg)("tr",{parentName:"thead"},(0,o.yg)("th",{parentName:"tr",align:null},"Method"),(0,o.yg)("th",{parentName:"tr",align:null},"Type"),(0,o.yg)("th",{parentName:"tr",align:null},"Description"))),(0,o.yg)("tbody",{parentName:"table"},(0,o.yg)("tr",{parentName:"tbody"},(0,o.yg)("td",{parentName:"tr",align:null},(0,o.yg)("inlineCode",{parentName:"td"},"load")),(0,o.yg)("td",{parentName:"tr",align:null},(0,o.yg)("inlineCode",{parentName:"td"},"(modelSource: ResourceSource): Promise<void>")),(0,o.yg)("td",{parentName:"tr",align:null},"Loads the model, where ",(0,o.yg)("inlineCode",{parentName:"td"},"modelSource")," is a string that specifies the location of the model binary.")),(0,o.yg)("tr",{parentName:"tbody"},(0,o.yg)("td",{parentName:"tr",align:null},(0,o.yg)("inlineCode",{parentName:"td"},"forward")),(0,o.yg)("td",{parentName:"tr",align:null},(0,o.yg)("inlineCode",{parentName:"td"},"(input: string): Promise<{ [category: string]: number }>")),(0,o.yg)("td",{parentName:"tr",align:null},"Executes the model's forward pass, where ",(0,o.yg)("inlineCode",{parentName:"td"},"input")," can be a fetchable resource or a Base64-encoded string.")),(0,o.yg)("tr",{parentName:"tbody"},(0,o.yg)("td",{parentName:"tr",align:null},(0,o.yg)("inlineCode",{parentName:"td"},"onDownloadProgress")),(0,o.yg)("td",{parentName:"tr",align:null},(0,o.yg)("inlineCode",{parentName:"td"},"(callback: (downloadProgress: number) => void): any")),(0,o.yg)("td",{parentName:"tr",align:null},"Subscribe to the download progress event.")))),(0,o.yg)("details",null,(0,o.yg)("summary",null,"Type definitions"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-typescript"},"type ResourceSource = string | number;\n"))),(0,o.yg)("h2",{id:"loading-the-model"},"Loading the model"),(0,o.yg)("p",null,"To load the model, use the ",(0,o.yg)("inlineCode",{parentName:"p"},"load")," method. It accepts the ",(0,o.yg)("inlineCode",{parentName:"p"},"modelSource")," which is a string that specifies the location of the model binary. For more information, take a look at ",(0,o.yg)("a",{parentName:"p",href:"/react-native-executorch/docs/fundamentals/loading-models"},"loading models")," page. This method returns a promise, which can resolve to an error or void."),(0,o.yg)("h2",{id:"running-the-model"},"Running the model"),(0,o.yg)("p",null,"To run the model, you can use the ",(0,o.yg)("inlineCode",{parentName:"p"},"forward")," method. It accepts one argument, which is the image. The image can be a remote URL, a local file URI, or a base64-encoded image. The method returns a promise, which can resolve either to an error or an object containing categories with their probabilities."))}u.isMDXComponent=!0}}]);