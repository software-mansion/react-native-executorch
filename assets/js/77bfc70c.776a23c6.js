"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[7144],{7276:(e,r,s)=>{s.r(r),s.d(r,{assets:()=>i,contentTitle:()=>c,default:()=>h,frontMatter:()=>o,metadata:()=>n,toc:()=>d});const n=JSON.parse('{"id":"utilities/resource-fetcher","title":"Resource Fetcher","description":"This module provides functions to download and work with downloaded files stored in the application\'s document directory inside the react-native-executorch/ directory. These utilities can help you manage your storage and clean up the downloaded files when they are no longer needed.","source":"@site/docs/utilities/resource-fetcher.md","sourceDirName":"utilities","slug":"/utilities/resource-fetcher","permalink":"/react-native-executorch/docs/utilities/resource-fetcher","draft":false,"unlisted":false,"editUrl":"https://github.com/software-mansion/react-native-executorch/edit/main/docs/docs/utilities/resource-fetcher.md","tags":[],"version":"current","frontMatter":{"title":"Resource Fetcher"},"sidebar":"tutorialSidebar","previous":{"title":"Model Size","permalink":"/react-native-executorch/docs/benchmarks/model-size"}}');var t=s(4848),l=s(8453);const o={title:"Resource Fetcher"},c=void 0,i={},d=[{value:"fetch",id:"fetch",level:2},{value:"Reference",id:"reference",level:3},{value:"Parameters",id:"parameters",level:3},{value:"Returns",id:"returns",level:3},{value:"fetchMultipleResources",id:"fetchmultipleresources",level:2},{value:"Reference",id:"reference-1",level:3},{value:"Parameters",id:"parameters-1",level:3},{value:"Returns",id:"returns-1",level:3},{value:"deleteMultipleResources",id:"deletemultipleresources",level:2},{value:"Reference",id:"reference-2",level:3},{value:"Parameters",id:"parameters-2",level:3},{value:"Returns",id:"returns-2",level:3},{value:"listDownloadedFiles",id:"listdownloadedfiles",level:2},{value:"Reference",id:"reference-3",level:3},{value:"Returns",id:"returns-3",level:3},{value:"listDownloadedModels",id:"listdownloadedmodels",level:2},{value:"Reference",id:"reference-4",level:3},{value:"Returns",id:"returns-4",level:3}];function a(e){const r={admonition:"admonition",code:"code",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",ul:"ul",...(0,l.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsxs)(r.p,{children:["This module provides functions to download and work with downloaded files stored in the application's document directory inside the ",(0,t.jsx)(r.code,{children:"react-native-executorch/"})," directory. These utilities can help you manage your storage and clean up the downloaded files when they are no longer needed."]}),"\n",(0,t.jsx)(r.h2,{id:"fetch",children:"fetch"}),"\n",(0,t.jsx)(r.p,{children:"Fetches a single resource (remote URL, local file or embedded asset), downloads or stores it locally for use by React Native ExecuTorch."}),"\n",(0,t.jsx)(r.h3,{id:"reference",children:"Reference"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-typescript",children:"import { ResourceFetcher } from 'react-native-executorch';\n\nconst localUri = await ResourceFetcher.fetch('https://.../llama3_2.pte');\n"})}),"\n",(0,t.jsx)(r.p,{children:"With download progress:"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-typescript",children:"const localUri = await ResourceFetcher.fetch(\n  'https://.../llama3_2.pte',\n  (progress) => {\n    console.log('Download progress:', progress);\n  }\n);\n"})}),"\n",(0,t.jsx)(r.h3,{id:"parameters",children:"Parameters"}),"\n",(0,t.jsxs)(r.ul,{children:["\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.code,{children:"source: ResourceSource"})," - A remote string URI, local file URI, require()-based asset."]}),"\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.code,{children:"callback?: (downloadProgress: number) => void"})," - Optional callback that reports download progress between 0 and 1."]}),"\n"]}),"\n",(0,t.jsx)(r.h3,{id:"returns",children:"Returns"}),"\n",(0,t.jsxs)(r.p,{children:[(0,t.jsx)(r.code,{children:"Promise<string>"})," \u2013 A promise which resolves to a local file path (without file:// prefix) for the stored resource."]}),"\n",(0,t.jsx)(r.admonition,{type:"info",children:(0,t.jsx)(r.p,{children:"If the resource is an object, it will be saved as a JSON file on disk."})}),"\n",(0,t.jsx)(r.h2,{id:"fetchmultipleresources",children:"fetchMultipleResources"}),"\n",(0,t.jsx)(r.p,{children:"Fetches multiple resources and combines individual download progress into a single callback."}),"\n",(0,t.jsx)(r.h3,{id:"reference-1",children:"Reference"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-typescript",children:"import { ResourceFetcher } from 'react-native-executorch';\n\nconst uris = await ResourceFetcher.fetchMultipleResources(\n  (progress) => console.log('Total progress:', progress),\n  'https://.../llama3_2.pte',\n  'https://.../qwen3.pte'\n);\n"})}),"\n",(0,t.jsx)(r.h3,{id:"parameters-1",children:"Parameters"}),"\n",(0,t.jsxs)(r.ul,{children:["\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.code,{children:"callback?: (downloadProgress: number) => void"})," - Optional callback to track progress of all downloads, reported between 0 and 1."]}),"\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.code,{children:"...sources: ResourceSource[]"})," - Multiple resources that can be strings, asset references, or objects."]}),"\n"]}),"\n",(0,t.jsx)(r.h3,{id:"returns-1",children:"Returns"}),"\n",(0,t.jsxs)(r.p,{children:[(0,t.jsx)(r.code,{children:"Promise<string[]>"})," \u2013 A promise which resolves to an array of local file paths for the downloaded/stored resources (without file:// prefix)."]}),"\n",(0,t.jsx)(r.h2,{id:"deletemultipleresources",children:"deleteMultipleResources"}),"\n",(0,t.jsx)(r.p,{children:"Deletes downloaded resources from the local filesystem."}),"\n",(0,t.jsx)(r.h3,{id:"reference-2",children:"Reference"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-typescript",children:"import { ResourceFetcher } from 'react-native-executorch';\n\nawait ResourceFetcher.deleteMultipleResources('https://.../llama3_2.pte');\n"})}),"\n",(0,t.jsx)(r.h3,{id:"parameters-2",children:"Parameters"}),"\n",(0,t.jsxs)(r.ul,{children:["\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.code,{children:"...sources: ResourceSource[]"})," - The resource identifiers used when calling ",(0,t.jsx)(r.code,{children:"fetch"}),"."]}),"\n"]}),"\n",(0,t.jsx)(r.h3,{id:"returns-2",children:"Returns"}),"\n",(0,t.jsxs)(r.p,{children:[(0,t.jsx)(r.code,{children:"Promise<void>"})," \u2013 A promise that resolves once all specified resources have been removed."]}),"\n",(0,t.jsx)(r.h2,{id:"listdownloadedfiles",children:"listDownloadedFiles"}),"\n",(0,t.jsx)(r.p,{children:"Lists all the downloaded files used by React Native ExecuTorch."}),"\n",(0,t.jsx)(r.h3,{id:"reference-3",children:"Reference"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-typescript",children:"import { ResourceFetcher } from 'react-native-executorch';\n\nconst filesUris = await ResourceFetcher.listDownloadedFiles();\n"})}),"\n",(0,t.jsx)(r.h3,{id:"returns-3",children:"Returns"}),"\n",(0,t.jsxs)(r.p,{children:[(0,t.jsx)(r.code,{children:"Promise<string[]>"})," - A promise, which resolves to an array of URIs for all the downloaded files."]}),"\n",(0,t.jsx)(r.h2,{id:"listdownloadedmodels",children:"listDownloadedModels"}),"\n",(0,t.jsx)(r.p,{children:"Lists all the downloaded models used by React Native ExecuTorch."}),"\n",(0,t.jsx)(r.h3,{id:"reference-4",children:"Reference"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-typescript",children:"import { ResourceFetcher } from 'react-native-executorch';\n\nconst modelsUris = await ResourceFetcher.listDownloadedModels();\n"})}),"\n",(0,t.jsx)(r.h3,{id:"returns-4",children:"Returns"}),"\n",(0,t.jsxs)(r.p,{children:[(0,t.jsx)(r.code,{children:"Promise<string[]>"})," - A promise, which resolves to an array of URIs for all the downloaded models."]})]})}function h(e={}){const{wrapper:r}={...(0,l.R)(),...e.components};return r?(0,t.jsx)(r,{...e,children:(0,t.jsx)(a,{...e})}):a(e)}},8453:(e,r,s)=>{s.d(r,{R:()=>o,x:()=>c});var n=s(6540);const t={},l=n.createContext(t);function o(e){const r=n.useContext(l);return n.useMemo((function(){return"function"==typeof e?e(r):{...r,...e}}),[r,e])}function c(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:o(e.components),n.createElement(l.Provider,{value:r},e.children)}}}]);