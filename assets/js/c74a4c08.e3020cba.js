"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[615],{5680:(e,t,n)=>{n.d(t,{xA:()=>s,yg:()=>g});var o=n(6540);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,o,r=function(e,t){if(null==e)return{};var n,o,r={},a=Object.keys(e);for(o=0;o<a.length;o++)n=a[o],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(o=0;o<a.length;o++)n=a[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var c=o.createContext({}),d=function(e){var t=o.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},s=function(e){var t=d(e.components);return o.createElement(c.Provider,{value:t},e.children)},p="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},m=o.forwardRef((function(e,t){var n=e.components,r=e.mdxType,a=e.originalType,c=e.parentName,s=l(e,["components","mdxType","originalType","parentName"]),p=d(n),m=r,g=p["".concat(c,".").concat(m)]||p[m]||u[m]||a;return n?o.createElement(g,i(i({ref:t},s),{},{components:n})):o.createElement(g,i({ref:t},s))}));function g(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var a=n.length,i=new Array(a);i[0]=m;var l={};for(var c in t)hasOwnProperty.call(t,c)&&(l[c]=t[c]);l.originalType=e,l[p]="string"==typeof e?e:r,i[1]=l;for(var d=2;d<a;d++)i[d]=n[d];return o.createElement.apply(null,i)}return o.createElement.apply(null,n)}m.displayName="MDXCreateElement"},9222:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>i,default:()=>u,frontMatter:()=>a,metadata:()=>l,toc:()=>d});var o=n(8168),r=(n(6540),n(5680));const a={title:"ObjectDetectionModule",sidebar_position:5},i=void 0,l={unversionedId:"hookless-api/ObjectDetectionModule",id:"hookless-api/ObjectDetectionModule",title:"ObjectDetectionModule",description:"Hookless implementation of the useObjectDetection hook.",source:"@site/docs/hookless-api/ObjectDetectionModule.md",sourceDirName:"hookless-api",slug:"/hookless-api/ObjectDetectionModule",permalink:"/react-native-executorch/docs/hookless-api/ObjectDetectionModule",draft:!1,editUrl:"https://github.com/software-mansion/react-native-executorch/edit/main/docs/docs/hookless-api/ObjectDetectionModule.md",tags:[],version:"current",sidebarPosition:5,frontMatter:{title:"ObjectDetectionModule",sidebar_position:5},sidebar:"tutorialSidebar",previous:{title:"StyleTransferModule",permalink:"/react-native-executorch/docs/hookless-api/StyleTransferModule"},next:{title:"OCRModule",permalink:"/react-native-executorch/docs/hookless-api/OCRModule"}},c={},d=[{value:"Reference",id:"reference",level:2},{value:"Methods",id:"methods",level:3},{value:"Loading the model",id:"loading-the-model",level:2},{value:"Running the model",id:"running-the-model",level:2}],s={toc:d},p="wrapper";function u(e){let{components:t,...n}=e;return(0,r.yg)(p,(0,o.A)({},s,n,{components:t,mdxType:"MDXLayout"}),(0,r.yg)("p",null,"Hookless implementation of the ",(0,r.yg)("a",{parentName:"p",href:"/react-native-executorch/docs/computer-vision/useObjectDetection"},"useObjectDetection")," hook."),(0,r.yg)("h2",{id:"reference"},"Reference"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-typescript"},"import {\n  ObjectDetectionModule,\n  SSDLITE_320_MOBILENET_V3_LARGE,\n} from 'react-native-executorch';\n\nconst imageUri = 'path/to/image.png';\n\n// Loading the model\nawait ObjectDetectionModule.load(SSDLITE_320_MOBILENET_V3_LARGE);\n\n// Running the model\nconst detections = await ObjectDetectionModule.forward(imageUri);\n")),(0,r.yg)("h3",{id:"methods"},"Methods"),(0,r.yg)("table",null,(0,r.yg)("thead",{parentName:"table"},(0,r.yg)("tr",{parentName:"thead"},(0,r.yg)("th",{parentName:"tr",align:null},"Method"),(0,r.yg)("th",{parentName:"tr",align:null},"Type"),(0,r.yg)("th",{parentName:"tr",align:null},"Description"))),(0,r.yg)("tbody",{parentName:"table"},(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("inlineCode",{parentName:"td"},"load")),(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("inlineCode",{parentName:"td"},"(modelSource: ResourceSource): Promise<void>")),(0,r.yg)("td",{parentName:"tr",align:null},"Loads the model, where ",(0,r.yg)("inlineCode",{parentName:"td"},"modelSource")," is a string that specifies the location of the model binary.")),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("inlineCode",{parentName:"td"},"forward")),(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("inlineCode",{parentName:"td"},"(input: string): Promise<Detection[]>")),(0,r.yg)("td",{parentName:"tr",align:null},"Executes the model's forward pass, where ",(0,r.yg)("inlineCode",{parentName:"td"},"input")," can be a fetchable resource or a Base64-encoded string.")),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("inlineCode",{parentName:"td"},"onDownloadProgress")),(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("inlineCode",{parentName:"td"},"(callback: (downloadProgress: number) => void): any")),(0,r.yg)("td",{parentName:"tr",align:null},"Subscribe to the download progress event.")))),(0,r.yg)("details",null,(0,r.yg)("summary",null,"Type definitions"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-typescript"},"type ResourceSource = string | number;\n\ninterface Bbox {\n  x1: number;\n  x2: number;\n  y1: number;\n  y2: number;\n}\n\ninterface Detection {\n  bbox: Bbox;\n  label: keyof typeof CocoLabel;\n  score: number;\n}\n"))),(0,r.yg)("h2",{id:"loading-the-model"},"Loading the model"),(0,r.yg)("p",null,"To load the model, use the ",(0,r.yg)("inlineCode",{parentName:"p"},"load")," method. It accepts the ",(0,r.yg)("inlineCode",{parentName:"p"},"modelSource")," which is a string that specifies the location of the model binary. For more information, take a look at ",(0,r.yg)("a",{parentName:"p",href:"/react-native-executorch/docs/fundamentals/loading-models"},"loading models")," page. This method returns a promise, which can resolve to an error or void."),(0,r.yg)("h2",{id:"running-the-model"},"Running the model"),(0,r.yg)("p",null,"To run the model, you can use the ",(0,r.yg)("inlineCode",{parentName:"p"},"forward")," method. It accepts one argument, which is the image. The image can be a remote URL, a local file URI, or a base64-encoded image. The method returns a promise, which can resolve either to an error or an array of ",(0,r.yg)("inlineCode",{parentName:"p"},"Detection")," objects. Each object contains coordinates of the bounding box, the label of the detected object, and the confidence score."))}u.isMDXComponent=!0}}]);