"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[864],{5680:(e,t,n)=>{n.d(t,{xA:()=>c,yg:()=>g});var r=n(6540);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var d=r.createContext({}),s=function(e){var t=r.useContext(d),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},c=function(e){var t=s(e.components);return r.createElement(d.Provider,{value:t},e.children)},p="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,d=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),p=s(n),m=a,g=p["".concat(d,".").concat(m)]||p[m]||u[m]||o;return n?r.createElement(g,l(l({ref:t},c),{},{components:n})):r.createElement(g,l({ref:t},c))}));function g(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,l=new Array(o);l[0]=m;var i={};for(var d in t)hasOwnProperty.call(t,d)&&(i[d]=t[d]);i.originalType=e,i[p]="string"==typeof e?e:a,l[1]=i;for(var s=2;s<o;s++)l[s]=n[s];return r.createElement.apply(null,l)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},7490:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>d,contentTitle:()=>l,default:()=>u,frontMatter:()=>o,metadata:()=>i,toc:()=>s});var r=n(8168),a=(n(6540),n(5680));const o={title:"StyleTransferModule",sidebar_position:4},l=void 0,i={unversionedId:"hookless-api/StyleTransferModule",id:"hookless-api/StyleTransferModule",title:"StyleTransferModule",description:"Hookless implementation of the useStyleTransfer hook.",source:"@site/docs/hookless-api/StyleTransferModule.md",sourceDirName:"hookless-api",slug:"/hookless-api/StyleTransferModule",permalink:"/react-native-executorch/docs/hookless-api/StyleTransferModule",draft:!1,editUrl:"https://github.com/software-mansion/react-native-executorch/edit/main/docs/docs/hookless-api/StyleTransferModule.md",tags:[],version:"current",sidebarPosition:4,frontMatter:{title:"StyleTransferModule",sidebar_position:4},sidebar:"tutorialSidebar",previous:{title:"LLMModule",permalink:"/react-native-executorch/docs/hookless-api/LLMModule"},next:{title:"ObjectDetectionModule",permalink:"/react-native-executorch/docs/hookless-api/ObjectDetectionModule"}},d={},s=[{value:"Reference",id:"reference",level:2},{value:"Methods",id:"methods",level:3},{value:"Loading the model",id:"loading-the-model",level:2},{value:"Running the model",id:"running-the-model",level:2}],c={toc:s},p="wrapper";function u(e){let{components:t,...n}=e;return(0,a.yg)(p,(0,r.A)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,a.yg)("p",null,"Hookless implementation of the ",(0,a.yg)("a",{parentName:"p",href:"/react-native-executorch/docs/computer-vision/useStyleTransfer"},"useStyleTransfer")," hook."),(0,a.yg)("h2",{id:"reference"},"Reference"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-typescript"},"import {\n  StyleTransferModule,\n  STYLE_TRANSFER_CANDY,\n} from 'react-native-executorch';\n\nconst imageUri = 'path/to/image.png';\n\n// Loading the model\nawait StyleTransferModule.load(STYLE_TRANSFER_CANDY);\n\n// Running the model\nconst generatedImageUrl = await StyleTransferModule.forward(imageUri);\n")),(0,a.yg)("h3",{id:"methods"},"Methods"),(0,a.yg)("table",null,(0,a.yg)("thead",{parentName:"table"},(0,a.yg)("tr",{parentName:"thead"},(0,a.yg)("th",{parentName:"tr",align:null},"Method"),(0,a.yg)("th",{parentName:"tr",align:null},"Type"),(0,a.yg)("th",{parentName:"tr",align:null},"Description"))),(0,a.yg)("tbody",{parentName:"table"},(0,a.yg)("tr",{parentName:"tbody"},(0,a.yg)("td",{parentName:"tr",align:null},(0,a.yg)("inlineCode",{parentName:"td"},"load")),(0,a.yg)("td",{parentName:"tr",align:null},(0,a.yg)("inlineCode",{parentName:"td"},"(modelSource: ResourceSource): Promise<void>")),(0,a.yg)("td",{parentName:"tr",align:null},"Loads the model, where ",(0,a.yg)("inlineCode",{parentName:"td"},"modelSource")," is a string that specifies the location of the model binary.")),(0,a.yg)("tr",{parentName:"tbody"},(0,a.yg)("td",{parentName:"tr",align:null},(0,a.yg)("inlineCode",{parentName:"td"},"forward")),(0,a.yg)("td",{parentName:"tr",align:null},(0,a.yg)("inlineCode",{parentName:"td"},"(input: string): Promise<string>")),(0,a.yg)("td",{parentName:"tr",align:null},"Executes the model's forward pass, where ",(0,a.yg)("inlineCode",{parentName:"td"},"input")," can be a fetchable resource or a Base64-encoded string.")),(0,a.yg)("tr",{parentName:"tbody"},(0,a.yg)("td",{parentName:"tr",align:null},(0,a.yg)("inlineCode",{parentName:"td"},"onDownloadProgress")),(0,a.yg)("td",{parentName:"tr",align:null},(0,a.yg)("inlineCode",{parentName:"td"},"(callback: (downloadProgress: number) => void): any")),(0,a.yg)("td",{parentName:"tr",align:null},"Subscribe to the download progress event.")))),(0,a.yg)("details",null,(0,a.yg)("summary",null,"Type definitions"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-typescript"},"type ResourceSource = string | number;\n"))),(0,a.yg)("h2",{id:"loading-the-model"},"Loading the model"),(0,a.yg)("p",null,"To load the model, use the ",(0,a.yg)("inlineCode",{parentName:"p"},"load")," method. It accepts the ",(0,a.yg)("inlineCode",{parentName:"p"},"modelSource")," which is a string that specifies the location of the model binary. For more information, take a look at ",(0,a.yg)("a",{parentName:"p",href:"/react-native-executorch/docs/fundamentals/loading-models"},"loading models")," page. This method returns a promise, which can resolve to an error or void."),(0,a.yg)("h2",{id:"running-the-model"},"Running the model"),(0,a.yg)("p",null,"To run the model, you can use the ",(0,a.yg)("inlineCode",{parentName:"p"},"forward")," method. It accepts one argument, which is the image. The image can be a remote URL, a local file URI, or a base64-encoded image. The method returns a promise, which can resolve either to an error or a URL to generated image."))}u.isMDXComponent=!0}}]);