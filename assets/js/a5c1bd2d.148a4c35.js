"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[217],{5680:(e,t,r)=>{r.d(t,{xA:()=>c,yg:()=>y});var o=r(6540);function n(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function l(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,o)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?l(Object(r),!0).forEach((function(t){n(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):l(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function a(e,t){if(null==e)return{};var r,o,n=function(e,t){if(null==e)return{};var r,o,n={},l=Object.keys(e);for(o=0;o<l.length;o++)r=l[o],t.indexOf(r)>=0||(n[r]=e[r]);return n}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(o=0;o<l.length;o++)r=l[o],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(n[r]=e[r])}return n}var s=o.createContext({}),d=function(e){var t=o.useContext(s),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},c=function(e){var t=d(e.components);return o.createElement(s.Provider,{value:t},e.children)},u="mdxType",p={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},f=o.forwardRef((function(e,t){var r=e.components,n=e.mdxType,l=e.originalType,s=e.parentName,c=a(e,["components","mdxType","originalType","parentName"]),u=d(r),f=n,y=u["".concat(s,".").concat(f)]||u[f]||p[f]||l;return r?o.createElement(y,i(i({ref:t},c),{},{components:r})):o.createElement(y,i({ref:t},c))}));function y(e,t){var r=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var l=r.length,i=new Array(l);i[0]=f;var a={};for(var s in t)hasOwnProperty.call(t,s)&&(a[s]=t[s]);a.originalType=e,a[u]="string"==typeof e?e:n,i[1]=a;for(var d=2;d<l;d++)i[d]=r[d];return o.createElement.apply(null,i)}return o.createElement.apply(null,r)}f.displayName="MDXCreateElement"},7058:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>p,frontMatter:()=>l,metadata:()=>a,toc:()=>d});var o=r(8168),n=(r(6540),r(5680));const l={title:"List Downloaded Resources",sidebar_position:1},i=void 0,a={unversionedId:"utils/list-downloaded-resources",id:"utils/list-downloaded-resources",title:"List Downloaded Resources",description:"This module provides functions to retrieve a list of downloaded files stored in the application's document directory inside the react-native-executorch/ directory. These utilities can help you manage your storage and clean up the downloaded files when they are no longer needed.",source:"@site/docs/utils/list-downloaded-resources.md",sourceDirName:"utils",slug:"/utils/list-downloaded-resources",permalink:"/react-native-executorch/docs/utils/list-downloaded-resources",draft:!1,editUrl:"https://github.com/software-mansion/react-native-executorch/edit/main/docs/docs/utils/list-downloaded-resources.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{title:"List Downloaded Resources",sidebar_position:1},sidebar:"tutorialSidebar",previous:{title:"Utils",permalink:"/react-native-executorch/docs/category/utils"},next:{title:"Benchmarks",permalink:"/react-native-executorch/docs/category/benchmarks"}},s={},d=[{value:"listDownloadedFiles",id:"listdownloadedfiles",level:2},{value:"Reference",id:"reference",level:3},{value:"Returns",id:"returns",level:3},{value:"listDownloadedModels",id:"listdownloadedmodels",level:2},{value:"Reference",id:"reference-1",level:3},{value:"Returns",id:"returns-1",level:3}],c={toc:d},u="wrapper";function p(e){let{components:t,...r}=e;return(0,n.yg)(u,(0,o.A)({},c,r,{components:t,mdxType:"MDXLayout"}),(0,n.yg)("p",null,"This module provides functions to retrieve a list of downloaded files stored in the application's document directory inside the ",(0,n.yg)("inlineCode",{parentName:"p"},"react-native-executorch/")," directory. These utilities can help you manage your storage and clean up the downloaded files when they are no longer needed."),(0,n.yg)("h2",{id:"listdownloadedfiles"},"listDownloadedFiles"),(0,n.yg)("p",null,"Lists all the downloaded files used by React Native ExecuTorch."),(0,n.yg)("h3",{id:"reference"},"Reference"),(0,n.yg)("pre",null,(0,n.yg)("code",{parentName:"pre",className:"language-typescript"},"import { listDownloadedFiles } from 'react-native-executorch';\n\nconst filesUris = await listDownloadedFiles();\n")),(0,n.yg)("h3",{id:"returns"},"Returns"),(0,n.yg)("p",null,(0,n.yg)("inlineCode",{parentName:"p"},"Promise<string[]>")," - A promise, which resolves to an array of URIs for all the downloaded files."),(0,n.yg)("admonition",{type:"info"},(0,n.yg)("p",{parentName:"admonition"},"Since this function returns all the downloaded files, it also includes all the downloaded models.\nIf you want to list only the downloaded models, use the ",(0,n.yg)("a",{parentName:"p",href:"/react-native-executorch/docs/utils/list-downloaded-resources#listdownloadedmodels"},"listDownloadedModels")," function.")),(0,n.yg)("h2",{id:"listdownloadedmodels"},"listDownloadedModels"),(0,n.yg)("p",null,"Lists all the downloaded models used by React Native ExecuTorch."),(0,n.yg)("h3",{id:"reference-1"},"Reference"),(0,n.yg)("pre",null,(0,n.yg)("code",{parentName:"pre",className:"language-typescript"},"import { listDownloadedModels } from 'react-native-executorch';\n\nconst modelsUris = await listDownloadedModels();\n")),(0,n.yg)("h3",{id:"returns-1"},"Returns"),(0,n.yg)("p",null,(0,n.yg)("inlineCode",{parentName:"p"},"Promise<string[]>")," - A promise, which resolves to an array of URIs for all the downloaded models."))}p.isMDXComponent=!0}}]);