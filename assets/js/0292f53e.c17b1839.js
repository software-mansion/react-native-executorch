"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[6055],{4103:(e,t,o)=>{o.r(t),o.d(t,{assets:()=>c,contentTitle:()=>s,default:()=>h,frontMatter:()=>i,metadata:()=>n,toc:()=>l});const n=JSON.parse('{"id":"typescript-api/TextEmbeddingsModule","title":"TextEmbeddingsModule","description":"TypeScript API implementation of the useTextEmbeddings hook.","source":"@site/docs/typescript-api/TextEmbeddingsModule.md","sourceDirName":"typescript-api","slug":"/typescript-api/TextEmbeddingsModule","permalink":"/react-native-executorch/docs/next/typescript-api/TextEmbeddingsModule","draft":false,"unlisted":false,"editUrl":"https://github.com/software-mansion/react-native-executorch/edit/main/docs/docs/typescript-api/TextEmbeddingsModule.md","tags":[],"version":"current","frontMatter":{"title":"TextEmbeddingsModule"},"sidebar":"tutorialSidebar","previous":{"title":"SpeechToTextModule","permalink":"/react-native-executorch/docs/next/typescript-api/SpeechToTextModule"},"next":{"title":"TokenizerModule","permalink":"/react-native-executorch/docs/next/typescript-api/TokenizerModule"}}');var d=o(4848),r=o(8453);const i={title:"TextEmbeddingsModule"},s=void 0,c={},l=[{value:"Reference",id:"reference",level:2},{value:"Methods",id:"methods",level:3},{value:"Loading the model",id:"loading-the-model",level:2},{value:"Running the model",id:"running-the-model",level:2}];function a(e){const t={a:"a",code:"code",h2:"h2",h3:"h3",p:"p",pre:"pre",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",...(0,r.R)(),...e.components},{Details:o}=t;return o||function(e,t){throw new Error("Expected "+(t?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("Details",!0),(0,d.jsxs)(d.Fragment,{children:[(0,d.jsxs)(t.p,{children:["TypeScript API implementation of the ",(0,d.jsx)(t.a,{href:"/react-native-executorch/docs/next/natural-language-processing/useTextEmbeddings",children:"useTextEmbeddings"})," hook."]}),"\n",(0,d.jsx)(t.h2,{id:"reference",children:"Reference"}),"\n",(0,d.jsx)(t.pre,{children:(0,d.jsx)(t.code,{className:"language-typescript",children:"import {\n  TextEmbeddingsModule,\n  ALL_MINILM_L6_V2,\n  All_MINILM_L6_V2_TOKENIZER,\n} from 'react-native-executorch';\n\n// Loading the model\nawait TextEmbeddingsModule.load(ALL_MINILM_L6_V2, All_MINILM_L6_V2_TOKENIZER);\n\n// Running the model\nconst embedding = await TextEmbeddingsModule.forward('Hello World!');\n"})}),"\n",(0,d.jsx)(t.h3,{id:"methods",children:"Methods"}),"\n",(0,d.jsxs)(t.table,{children:[(0,d.jsx)(t.thead,{children:(0,d.jsxs)(t.tr,{children:[(0,d.jsx)(t.th,{children:"Method"}),(0,d.jsx)(t.th,{children:"Type"}),(0,d.jsx)(t.th,{children:"Description"})]})}),(0,d.jsxs)(t.tbody,{children:[(0,d.jsxs)(t.tr,{children:[(0,d.jsx)(t.td,{children:(0,d.jsx)(t.code,{children:"load"})}),(0,d.jsx)(t.td,{children:(0,d.jsx)(t.code,{children:"(modelSource: ResourceSource, tokenizerSource: ResourceSource, meanPooling?: boolean): Promise<void>"})}),(0,d.jsxs)(t.td,{children:["Loads the model, where ",(0,d.jsx)(t.code,{children:"modelSource"})," is a string that specifies the location of the model binary, ",(0,d.jsx)(t.code,{children:"tokenizerSource"})," is a string that specifies the location of the tokenizer JSON file, and ",(0,d.jsx)(t.code,{children:"meanPooling"})," controls when to perform pooling on model outputs."]})]}),(0,d.jsxs)(t.tr,{children:[(0,d.jsx)(t.td,{children:(0,d.jsx)(t.code,{children:"forward"})}),(0,d.jsx)(t.td,{children:(0,d.jsx)(t.code,{children:"(input: string): Promise<number[]>"})}),(0,d.jsxs)(t.td,{children:["Executes the model's forward pass, where ",(0,d.jsx)(t.code,{children:"input"})," is a text that will be embedded."]})]}),(0,d.jsxs)(t.tr,{children:[(0,d.jsx)(t.td,{children:(0,d.jsx)(t.code,{children:"onDownloadProgress"})}),(0,d.jsx)(t.td,{children:(0,d.jsx)(t.code,{children:"(callback: (downloadProgress: number) => void): any"})}),(0,d.jsx)(t.td,{children:"Subscribe to the download progress event."})]})]})]}),"\n",(0,d.jsxs)(o,{children:[(0,d.jsx)("summary",{children:"Type definitions"}),(0,d.jsx)(t.pre,{children:(0,d.jsx)(t.code,{className:"language-typescript",children:"type ResourceSource = string | number | object;\n"})})]}),"\n",(0,d.jsx)(t.h2,{id:"loading-the-model",children:"Loading the model"}),"\n",(0,d.jsxs)(t.p,{children:["To load the model, use the ",(0,d.jsx)(t.code,{children:"load"})," method. It accepts the ",(0,d.jsx)(t.code,{children:"modelSource"})," which is a string that specifies the location of the model binary, ",(0,d.jsx)(t.code,{children:"tokenizerSource"})," which is a string that specifies the location of the tokenizer JSON file, and optional ",(0,d.jsx)(t.code,{children:"meanPooling"})," flag controls when to perform pooling on model outputs. For more information, take a look at ",(0,d.jsx)(t.a,{href:"/react-native-executorch/docs/next/fundamentals/loading-models",children:"loading models"})," page. This method returns a promise, which can resolve to an error or void."]}),"\n",(0,d.jsx)(t.h2,{id:"running-the-model",children:"Running the model"}),"\n",(0,d.jsxs)(t.p,{children:["To run the model, you can use the ",(0,d.jsx)(t.code,{children:"forward"})," method. It accepts one argument, which is the text you want to embed. The method returns a promise, which can resolve either to an error or an array of numbers representing the embedding."]})]})}function h(e={}){const{wrapper:t}={...(0,r.R)(),...e.components};return t?(0,d.jsx)(t,{...e,children:(0,d.jsx)(a,{...e})}):a(e)}},8453:(e,t,o)=>{o.d(t,{R:()=>i,x:()=>s});var n=o(6540);const d={},r=n.createContext(d);function i(e){const t=n.useContext(r);return n.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function s(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(d):e.components||d:i(e.components),n.createElement(r.Provider,{value:t},e.children)}}}]);